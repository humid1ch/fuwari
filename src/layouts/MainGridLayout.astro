---
import BackToTop from "@components/control/BackToTop.astro";
import Footer from "@components/Footer.astro";
import Navbar from "@components/Navbar.astro";
import SideBar from "@components/widget/SideBar.astro";
import type { MarkdownHeading } from "astro";
import { Icon } from "astro-icon/components";
import ImageWrapper from "../components/misc/ImageWrapper.astro";
import TOC from "../components/widget/TOC.astro";
import { siteConfig } from "../config";
import {
	BANNER_HEIGHT,
	BANNER_HEIGHT_EXTEND,
	MAIN_PANEL_OVERLAPS_BANNER_HEIGHT,
} from "../constants/constants";
import Layout from "./Layout.astro";

interface Props {
	title?: string;
	banner?: string;
	description?: string;
	lang?: string;
	setOGTypeArticle?: boolean;
	headings?: MarkdownHeading[];
}

const {
	title,
	banner,
	description,
	lang,
	setOGTypeArticle,
	headings = [],
} = Astro.props;
const hasBannerCredit =
	siteConfig.banner.enable && siteConfig.banner.credit.enable;
const hasBannerLink = !!siteConfig.banner.credit.url;

const mainPanelTop = siteConfig.banner.enable
	? `calc(${BANNER_HEIGHT}vh - ${MAIN_PANEL_OVERLAPS_BANNER_HEIGHT}rem)`
	: "5.5rem";
---

<Layout title={title} banner={banner} description={description} lang={lang} setOGTypeArticle={setOGTypeArticle}>

<!-- Navbar -->
<slot slot="head" name="head"></slot>
<div id="top-row" class="z-50 pointer-events-none relative transition-all duration-700 max-w-[var(--page-width)] px-0 md:px-4 mx-auto" class:list={[""]}>
    <div id="navbar-wrapper" class="pointer-events-auto sticky top-0 transition-all">
        <Navbar></Navbar>
    </div>
</div>

<!-- Banner -->
{siteConfig.banner.enable && <div id="banner-wrapper" class={`absolute z-10 w-full transition duration-700 overflow-hidden`} style={`top: -${BANNER_HEIGHT_EXTEND}vh`}>
    <ImageWrapper id="banner" alt="Banner image of the blog" class:list={["object-cover h-full transition duration-700 opacity-0 scale-105"]}
                  src={siteConfig.banner.src} position={siteConfig.banner.position}
    >
    </ImageWrapper>
</div>}

<!-- Main content -->
<div class="absolute w-full z-30 pointer-events-none" style={`top: ${mainPanelTop}`}>
    <!-- The pointer-events-none here prevent blocking the click event of the TOC -->
    <div class="relative max-w-[var(--page-width)] mx-auto pointer-events-auto">
        <div id="main-grid" class="transition duration-700 w-full left-0 right-0 grid grid-cols-[17.5rem_auto] grid-rows-[auto_1fr_auto] lg:grid-rows-[auto]
    mx-auto gap-4 px-0 md:px-4"
        >
            <!-- Banner image credit -->
            {hasBannerCredit && <a href={siteConfig.banner.credit.url} id="banner-credit" target="_blank" rel="noopener" aria-label="Visit image source"
                                   class:list={["group onload-animation transition-all absolute flex justify-center items-center rounded-full " +
                                   "px-3 right-4 -top-[3.25rem] bg-black/60 hover:bg-black/70 h-9", {"hover:pr-9 active:bg-black/80": hasBannerLink}]}
            >
                <Icon class="text-white/75 text-[1.25rem] mr-1" name="material-symbols:copyright-outline-rounded" ></Icon>
                <div class="text-white/75 text-xs">{siteConfig.banner.credit.text}</div>
                <Icon class:list={["transition absolute text-[oklch(0.75_0.14_var(--hue))] right-4 text-[0.75rem] opacity-0",
                    {"group-hover:opacity-100": hasBannerLink}]}
                      name="fa6-solid:arrow-up-right-from-square">
                </Icon>
            </a>}


            <SideBar class="mb-4 row-start-2 row-end-3 col-span-2 lg:row-start-1 lg:row-end-2 lg:col-span-1 lg:max-w-[17.5rem] onload-animation" headings={headings}></SideBar>

            <main id="swup-container" class="transition-swup-fade col-span-2 lg:col-span-1 overflow-hidden">
                <div id="content-wrapper" class="onload-animation">
                    <!-- the overflow-hidden here prevent long text break the layout-->
                    <!-- make id different from windows.swup global property -->
                    <slot></slot>
                    <div class="footer col-span-2 onload-animation hidden lg:block">
                        <Footer></Footer>
                    </div>
                </div>
            </main>

            <div class="footer col-span-2 onload-animation block lg:hidden">
                <Footer></Footer>
            </div>
        </div>

        <BackToTop></BackToTop>
    </div>
</div>

<!-- The things that should be under the banner, only the TOC for now -->
<div class="absolute w-full z-0 hidden 2xl:block">
    <div class="relative max-w-[var(--page-width)] mx-auto">
        <!-- TOC component -->
        {siteConfig.toc.enable && <div id="toc-wrapper" class:list={["hidden lg:block transition absolute top-0 -right-[var(--toc-width)] w-[var(--toc-width)] items-center",
            {"toc-hide": siteConfig.banner.enable}]}
        >
            <div id="toc-inner-wrapper" class="fixed top-14 w-[var(--toc-width)] h-[calc(100vh_-_20rem)] overflow-y-scroll overflow-x-hidden hide-scrollbar">
                <div id="toc" class="w-full h-full transition-swup-fade ">
                    <div class="h-8 w-full"></div>
                    <TOC headings={headings}></TOC>
                    <div class="h-8 w-full"></div>
                </div>
            </div>
        </div>}

        <!-- #toc needs to exist for Swup to work normally -->
        {!siteConfig.toc.enable && <div id="toc"></div>}
    </div>
</div>
</Layout>

<script is:inline>
(function() {
  // 防止重复初始化整个逻辑
  if (window._decoShapesInitialized) return;
  window._decoShapesInitialized = true;

  function rand(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  }

  const SHAPE_COUNT = 55;
  const BUFFER = 300;

  // 初始化全局状态（只做一次）
  if (!window._shapePool) {
    window._shapePool = [];
    window._shapesIsInitialized = false;
  }

  const directions = [
    'polygon(50% 0%, 0% 100%, 100% 100%)',
    'polygon(50% 100%, 0% 0%, 100% 0%)',
    'polygon(0% 50%, 100% 0%, 100% 100%)',
    'polygon(100% 50%, 0% 0%, 0% 100%)'
  ];

  function initShapePool() {
    if (window._shapesIsInitialized) return;
    for (let i = 0; i < SHAPE_COUNT; i++) {
      const el = document.createElement('div');
      el.className = 'deco-shape';
      document.body.appendChild(el);
      window._shapePool.push(el);
    }
    window._shapesIsInitialized = true;
  }

  function updateShapes() {
    if (!window._shapesIsInitialized) return;

    const { innerWidth, innerHeight } = window;
    const shapePool = window._shapePool;

    for (let i = 0; i < SHAPE_COUNT; i++) {
      const el = shapePool[i];
      el.style.opacity = '0';
      el.style.transform = 'translate(0, 0)';
      el.style.width = '20px';
      el.style.height = '20px';
      el.style.borderRadius = '50%';
      el.style.clipPath = 'none';
    }

    requestAnimationFrame(() => {
      requestAnimationFrame(() => {
        for (let i = 0; i < SHAPE_COUNT; i++) {
          const el = shapePool[i];
          const shapeType = rand(0, 2);
          const x = rand(-50, innerWidth + 50);
          const y = rand(-BUFFER, innerHeight + BUFFER);

          if (shapeType === 0) {
            const size = rand(20, 100);
            el.style.width = `${size}px`;
            el.style.height = `${size}px`;
            el.style.borderRadius = '50%';
            el.style.clipPath = 'none';
          } else if (shapeType === 1) {
            el.style.width = `${rand(20, 100)}px`;
            el.style.height = `${rand(20, 100)}px`;
            el.style.borderRadius = '0';
            el.style.clipPath = 'none';
          } else {
            const size = rand(30, 100);
            el.style.width = `${size}px`;
            el.style.height = `${size}px`;
            el.style.borderRadius = '0';
            el.style.clipPath = directions[rand(0, 3)];
          }

          el.style.transform = `translate(${x}px, ${y}px)`;
          el.style.opacity = '0.5';
        }
      });
    });
  }

  function generateOrRefresh() {
    initShapePool();
    updateShapes();
  }

  // 首次加载
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', generateOrRefresh);
  } else {
    generateOrRefresh();
  }

  // 客户端导航：只更新，不重新创建元素
  document.addEventListener('astro:page-load', updateShapes);
})();
</script>
